
/*
  I want to be efficient at cpp, and I found this website called project Euler.
  so I will try to solve at least three or four problems per week.
  .
  According to project Euler, the first 100 problems can be shared,
  so these are my solutions to the first 100 problems.
  Enjoy and of course, feedback is more than welcome  
*/

//#####################################################################################################
/*PROBLEM 1*/
/*
    If we list all the natural numbers below 10
    that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
*/

#include <iostream>

using namespace std;

int main()
{
    int MAX = 1000;
    int c{0};
    
    for (int i = 0; i!=MAX; i++)
    {
        if (i%3 == 0 || i%5 == 0)
        {
            c+=i;
        };
        
    }
    cout << c;
}


//#####################################################
/*PROBLEM 2*/
/*
	Each new term in the Fibonacci sequence is generated by adding the previous two terms.
	By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million,

	find the sum of the even-valued terms.
*/


#include <iostream>

using namespace std;

int main()
{
    int MAX = 4000000;
    int a1 = 1;
    int a2 = 2;
    int s = 2;
    int r = 0;
    
    while(r < MAX)
    {
        r = a1 + a2;
        a1 = a2;
        a2 = r;
        if (a2%2==0)
        {
            s += a2;
        }
    }
    cout << s;
}   

//###########################################
/*PROBLEM 3*/

#include <iostream>
#include <math.h>

using namespace std;

long int isitprime(long int a)
{
    long int aa = sqrt(a);
    
    while (aa > 0)	
    {
        aa -= 1;       
        if (a%aa == 0)
        {
            long int aaa = aa;
            while(aaa>0)
            {
                aaa-=1;
                if (aa%aaa==0 && aaa!=1)
                {
                    break;
                }
                else if (aaa == 1)
                {
                    return aa;
                }
            }
        }
        
        
    }
}
int main()
{
    cout << isitprime(600851475143 ); 
}   



//#######################################################
/*PROBLEM 4*/


/*
    can be divided by 1  ==> every integer;                                     ####
    can be divided by 2  ==> last digit is even (0,2,4,6,8);                    ####
    can be divided by 3  ==>
    can be divided by 4  ==> 
    can be divided by 5  ==> last digit must be either 0 or 5;                  ####
    can be divided by 6  ==> 
    can be divided by 7  ==>
    can be divided by 8  ==>
    can be divided by 9  ==>
    can be divided by 10 ==> last digit must be 0                              ####
    can be divided by 11 ==> 
    can be divided by 12 ==>
    can be divided by 13 ==> 
    can be divided by 14 ==>
    can be divided by 15 ==> either 15, 30, 45, 60, 75, 90, 105, 120,135, 150
    can be divided by 16 ==>
    can be divided by 17 ==>
    can be divided by 18 ==>
    can be divided by 19 ==>
    can be divided by 20 ==> last two digits must be multiplier of 20           ####
                             which means (00,20,40,60,80)
    
    
    
    our number must end with a zero
    our number must second digit from the end is either 0,2,4,6,8
	
	the number can be divided by 
    
    wait a min, if 2520 can be divided by numbers [1-10] 
    then its multipliers will be the same same
    
*/



/* 25 min*/
#include <iostream>

using namespace std;

int main()
{
    int number = 2520;
    int dividers_max = 10;
    
    for (int i=20; i<100000000; i++)
    {
        int r = i*2520;
        if (r%11 == 0 && r%12 == 0 &&  r%13 == 0 && r%14 == 0 && r%16 == 0 && r%17 == 0 && r%18 == 0 && r%19 == 0)
        {
            cout << r;
            break;
        }
    }

}




// ###############################################################


	
/*

// problem 17

If the numbers 1 to 5 are written out in words: 
one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

If all the numbers from 1 to 1000 (one thousand)
 inclusive were written out in words, how many letters would be used?


NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) 
contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.

*/


#include <iostream>

using namespace std;




int sum = 0;







void ccc (int c)
{
        switch (c) 
        {
            case 1:
            case 2:
            case 6:
                sum += 3; 
                break;
            case 4:
            case 5:
            case 9:
                sum += 4;
                break;
            case 3:
            case 7:
            case 8:
                sum += 5;
                break;
            case 0:
                sum += 0;
                break;
        }
}


void bc(int b, int c)
{
    switch ((b*10)+c) 
    {
    case 10:
        sum += 3; 
        break;
    case 11:
    case 12:
        sum += 6;
        break;

    case 13:
    case 14:
    case 18:
    case 19:
        sum += 8;
        break;
    case 15:
    case 16:
        sum += 7;
        break;
    case 17:
        sum += 9;
        break;
    }


}


void bbbccc(int b,int c)
{
    switch (b*10)
        {
        case 10:
            sum += 3;
            break;
        case 20:
        case 30:
        case 80:
        case 90:
            sum += 6;
            break;
        case 40:
        case 50:
        case 60:
            sum += 5;
            break;
        case 70:
            sum += 7;
            break;
        }
        
}


int count(int n)
{
    int a = n/100;
    int b = (n-(100*a))/10;
    int c = n-(a*100)-(b*10);
    
    if (b == 0){ccc(c);}
    else if (b == 1){bc(b,c);}
    else if (b != 0 && b != 1)
    {   
        if (c == 0){bbbccc(b,c);}
        else if (c != 0){bbbccc(b,c);ccc(c);}
    }

    if (a != 0)
    {
        if (b == 0 && c == 0){sum += 7; ccc(a);}
        else if (b != 0 || c != 0){ccc(a);sum+= 10;}
    }
    return sum;
}
int total = 11;
int main () 
{

for (int i = 0; i < 1000 ; i++)
{
    int ttt = count(i);
    // cout << ttt << endl;
    // cout<<sum;
    sum = 0;
    total += ttt;

}

cout << count(342) << endl;

cout << total;
}

// #####################################
// problem 19 //

/*
You are given the following information, but you may prefer to do some research for yourself.

1 Jan 1900 was a Monday.
Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
*/
#include <iostream>
using namespace std;
int months[12] = {31,28,31,30,31,30,31,31,30,31,30,31};

int main()
{
    int y = 1;
    int days = 1;
    int result = 0;
    while (y <= 100)
    {
        for (int m = 1; m < 13; m++ )
        {
            
            if (m == 2)
            {
                if (y%4 == 0) {days += months[m-1] + 1;}
                else {days += months[m-1];}
            }
            else {days += months[m-1];}
            
            if (days % 7 == 6){result++;}
            
        }
        y++;
        
    }
    cout << result;
}


